var brick = require('.')
var pg = require('pg')
var cadence = require('cadence')
var abend = require('abend')

var search = function(params) {
  var keys = 'product_number product_type manufacturer_number specific_type generic_type'.split(' ')
  var searches = []
  searches.push(keys.reduce(function(memo, key) {
    memo[key] = memo[key]
    return memo
  }, params))
  searches.push(Object.assign({}, searches[0], { product_number: null }))
  searches.push(Object.assign({}, searches[1], { product_type: null }))
  searches.push(Object.assign({}, searches[2], { manufacturer_number: null }))
  searches.push(Object.assign({}, searches[3], { specific_type: null }))
  searches.push(Object.assign({}, searches[0], { product_type: null, specific_type: null, generic_type: null }))
  searches.push(Object.assign({}, searches[4], { generic_type: null, object_type: 'UknownDevice' }))

  return searches
}

var searches = search({
  device_radio: 'zwave',
  product_number: 123,
  manufacturer_number: 234,
  generic_type: 345,
  specific_type: '456'
})

var examples = {}

examples.raw = function() {
  var query = {}
  query.params = []

  var conditions = searches.map(function(search) {
    var text = Object.keys(search).map(function(key) {
      var value = search[key]
      if (value === null) {
        return key + ' IS NULL'
      } else {
        query.params.push(value)
        return key + ' = $' + query.params.length
      }
    }).join(' AND ')
    return '(' + text + ')'
  }).join(' OR ')

  query.text = 'SELECT * FROM upcs LEFT JOIN supported_devices ON (upcs.supported_device_id = supported_devices.id) WHERE (' + conditions + ')'

  return query
}

examples.brick = function() {

  var items = searches.map(function(search) {
    return brick.fn.wrap(brick.conditions(search))
  })

  var where = brick.join(items, 'OR')

  var query = brick('SELECT * FROM upcs LEFT JOIN supported_devices ON (upcs.supported_device_id = supported_devices.id) WHERE (?)', where)

  return query.build('pg')
}

examples.raw()
