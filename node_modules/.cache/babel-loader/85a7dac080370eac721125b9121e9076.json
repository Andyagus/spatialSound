{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/AndyXcode/post_flatiron/week3/object-info-xr/src/App.js\";\nimport './App.css';\nimport PlayButton from './components/PlayButton';\nimport Effects from './components/Effects';\nimport React from 'react';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playing: false,\n      song: process.env.PUBLIC_URL + 'thedeli.mp3',\n      audioElement: null,\n      audioContext: null,\n      gainNode: null,\n      gainValue: null,\n      panner: null\n    };\n\n    this.playClickHandler = e => {\n      console.log(e);\n      console.log(this.state.gain, \"gainnn\");\n      this.setState({\n        playing: !this.state.playing\n      });\n      this.state.audioContext.resume();\n\n      if (this.state.playing === false) {\n        console.log(\"playing\");\n        this.state.audioElement.play();\n      } else if (this.state.playing === true) {\n        console.log(\"notplaying\");\n        this.state.audioElement.pause();\n      }\n    };\n\n    this.effectHandler = e => {\n      this.setState({\n        gainValue: e\n      }, console.log(this.state.gainValue), this.state.gainNode.gain.value = this.state.gainValue);\n    };\n  }\n\n  componentDidMount() {\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    const audioContext = new AudioContext();\n    this.setState({\n      audioContext: audioContext\n    });\n    const audioElement = document.querySelector('audio');\n    this.setState({\n      audioElement: audioElement\n    });\n    const track = audioContext.createMediaElementSource(audioElement);\n    track.connect(audioContext.destination);\n    const gainNode = audioContext.createGain();\n    track.connect(gainNode).connect(audioContext.destination);\n    this.setState({\n      gainNode: gainNode\n    });\n    const panner = new StereoPannerNode(audioContext, pannerOptions);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Tone Handler \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: this.state.song\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n        playClickHandler: this.playClickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Effects, {\n        effectHandler: this.effectHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/AndyXcode/post_flatiron/week3/object-info-xr/src/App.js"],"names":["PlayButton","Effects","React","App","Component","state","playing","song","process","env","PUBLIC_URL","audioElement","audioContext","gainNode","gainValue","panner","playClickHandler","e","console","log","gain","setState","resume","play","pause","effectHandler","value","componentDidMount","AudioContext","window","webkitAudioContext","document","querySelector","track","createMediaElementSource","connect","destination","createGain","StereoPannerNode","pannerOptions","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport PlayButton from './components/PlayButton'\nimport Effects from './components/Effects'\nimport React from 'react'\n\nexport default class App extends React.Component{\n\n  state = {\n    playing: false,\n    song: process.env.PUBLIC_URL + 'thedeli.mp3',\n    audioElement: null,\n    audioContext: null,\n    gainNode: null,\n    gainValue: null,\n    panner: null\n  }\n\n  componentDidMount(){\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    const audioContext = new AudioContext();\n    this.setState({audioContext: audioContext})\n    const audioElement = document.querySelector('audio');\n    this.setState({audioElement:audioElement})\n    const track = audioContext.createMediaElementSource(audioElement);\n    track.connect(audioContext.destination);\n    const gainNode = audioContext.createGain();\n    track.connect(gainNode).connect(audioContext.destination);\n    this.setState({gainNode: gainNode})\n    const panner = new StereoPannerNode(audioContext, pannerOptions);\n\n\n  }\n\n  playClickHandler = (e) => {\n    console.log(e)\n    console.log(this.state.gain, \"gainnn\")\n    this.setState({playing: !this.state.playing})\n    this.state.audioContext.resume();\n    if(this.state.playing === false){\n      console.log(\"playing\")\n      this.state.audioElement.play()\n    }else if(this.state.playing === true){\n      console.log(\"notplaying\")\n      this.state.audioElement.pause()\n    }\n  }\n\n  effectHandler = (e) => {\n    this.setState({gainValue: e},\n    console.log(this.state.gainValue),\n    this.state.gainNode.gain.value = this.state.gainValue\n    )\n\n  }\n\n\n  render(){\n    return(\n      <div> \n      <h1> Tone Handler </h1>\n      <audio src={this.state.song}></audio>\n      <PlayButton playClickHandler={this.playClickHandler} />\n      <Effects effectHandler={this.effectHandler}/>\n      </div>\n    )\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}