{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nvar MusicNote = React.createClass({\n  displayName: \"MusicNote\",\n  getDefaultProps: function () {\n    return {\n      // allow the initial position to be passed in as a prop\n      initialPos: {\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  getInitialState: function () {\n    return {\n      pos: this.props.initialPos,\n      dragging: false,\n      rel: null // position relative to the cursor\n\n    };\n  },\n  // we could get away with not having this (and just having the listeners on\n  // our div), but then the experience would be possibly be janky. If there's\n  // anything w/ a higher z-index that gets in the way, then you're toast,\n  // etc.\n  componentDidUpdate: function (props, state) {\n    if (this.state.dragging && !state.dragging) {\n      document.addEventListener('mousemove', this.onMouseMove);\n      document.addEventListener('mouseup', this.onMouseUp);\n    } else if (!this.state.dragging && state.dragging) {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n  },\n  // calculate relative position to the mouse and set dragging=true\n  onMouseDown: function (e) {\n    // only left mouse button\n    if (e.button !== 0) return;\n    var pos = $(this.getDOMNode()).offset();\n    this.setState({\n      dragging: true,\n      rel: {\n        x: e.pageX - pos.left,\n        y: e.pageY - pos.top\n      }\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  onMouseUp: function (e) {\n    this.setState({\n      dragging: false\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  onMouseMove: function (e) {\n    if (!this.state.dragging) return;\n    this.setState({\n      pos: {\n        x: e.pageX - this.state.rel.x,\n        y: e.pageY - this.state.rel.y\n      }\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  render: function () {\n    // transferPropsTo will merge style & other props passed into our\n    // component to also be on the child DIV.\n    return this.transferPropsTo(React.DOM.div({\n      onMouseDown: this.onMouseDown,\n      style: {\n        left: this.state.pos.x + 'px',\n        top: this.state.pos.y + 'px'\n      }\n    }, this.props.children));\n  }\n});","map":{"version":3,"sources":["/Users/AndyXcode/post_flatiron/week3/spaceSound/src/components/MusicNote.js"],"names":["React","ReactDOM","MusicNote","createClass","getDefaultProps","initialPos","x","y","getInitialState","pos","props","dragging","rel","componentDidUpdate","state","document","addEventListener","onMouseMove","onMouseUp","removeEventListener","onMouseDown","e","button","$","getDOMNode","offset","setState","pageX","left","pageY","top","stopPropagation","preventDefault","render","transferPropsTo","DOM","div","style","children"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nvar MusicNote = React.createClass({\n  getDefaultProps: function () {\n    return {\n      // allow the initial position to be passed in as a prop\n      initialPos: {x: 0, y: 0}\n    }\n  },\n  getInitialState: function () {\n    return {\n      pos: this.props.initialPos,\n      dragging: false,\n      rel: null // position relative to the cursor\n    }\n  },\n  // we could get away with not having this (and just having the listeners on\n  // our div), but then the experience would be possibly be janky. If there's\n  // anything w/ a higher z-index that gets in the way, then you're toast,\n  // etc.\n  componentDidUpdate: function (props, state) {\n    if (this.state.dragging && !state.dragging) {\n      document.addEventListener('mousemove', this.onMouseMove)\n      document.addEventListener('mouseup', this.onMouseUp)\n    } else if (!this.state.dragging && state.dragging) {\n      document.removeEventListener('mousemove', this.onMouseMove)\n      document.removeEventListener('mouseup', this.onMouseUp)\n    }\n  },\n\n  // calculate relative position to the mouse and set dragging=true\n  onMouseDown: function (e) {\n    // only left mouse button\n    if (e.button !== 0) return\n    var pos = $(this.getDOMNode()).offset()\n    this.setState({\n      dragging: true,\n      rel: {\n        x: e.pageX - pos.left,\n        y: e.pageY - pos.top\n      }\n    })\n    e.stopPropagation()\n    e.preventDefault()\n  },\n  onMouseUp: function (e) {\n    this.setState({dragging: false})\n    e.stopPropagation()\n    e.preventDefault()\n  },\n  onMouseMove: function (e) {\n    if (!this.state.dragging) return\n    this.setState({\n      pos: {\n        x: e.pageX - this.state.rel.x,\n        y: e.pageY - this.state.rel.y\n      }\n    })\n    e.stopPropagation()\n    e.preventDefault()\n  },\n  render: function () {\n    // transferPropsTo will merge style & other props passed into our\n    // component to also be on the child DIV.\n    return this.transferPropsTo(React.DOM.div({\n      onMouseDown: this.onMouseDown,\n      style: {\n        left: this.state.pos.x + 'px',\n        top: this.state.pos.y + 'px'\n      }\n    }, this.props.children))\n  }\n})"]},"metadata":{},"sourceType":"module"}